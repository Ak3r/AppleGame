import React from 'react';
import './App.css';

import Button from './components/Button';
import UserField from './components/UserField';
import MachineField from './components/MachineField';

class App extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            apples: ['üçé','üçé','üçé','üçé','üçé',
                     'üçé','üçé','üçé','üçé','üçé',
                     'üçé','üçé','üçé','üçé','üçé',
                     'üçé','üçé','üçé','üçé','üçé',
                     'üçé','üçé','üçé','üçé','üçé'], 
            userScore: 0,
            userArray: [],
            machineScore: 0,
            machineArray: []  
        };
    }

  handleClick = (n) => {
    this.removeFromApplesArray(n);
    this.setState({userScore: this.state.userScore + n}); // –º–µ–Ω—è–µ–º —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.changeUserScoreArray(n, this.state.userArray); // –º–µ–Ω—è–º –º–∞—Å—Å–∏–≤ —Å —è–±–ª–æ–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    setTimeout(this.machineTurn, 300); // —Ö–æ–¥ –ò–ò
  }  

  machineTurn = () => {
    for ( let i = 1; i <= 3; i++) { // i - –∫–æ–ª-–≤–æ —è–±–ª–æ–∫ –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑—å–º–µ—Ç –ò–ò
        let leftApples; // –∫–æ–ª-–≤–æ —è–±–ª–æ–∫ –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ò–ò —Å–¥–µ–ª–∞–µ—Ç —Ö–æ–¥
        leftApples = this.state.apples.length - i; 

        // –µ—Å–ª–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —á–∏—Å–ª–æ —è–±–ª–æ–∫, —Å—Ä–∞–≤–Ω–∏–º–æ–µ —Å 0 –∏–ª–∏ 1 –ø–æ –º–æ–¥—É–ª—é 4, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ i –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        if ( leftApples % 4 === 0 || leftApples % 4 === 1 ) {
          this.removeFromApplesArray(i);
          this.setState({machineScore: this.state.machineScore + i}); // –º–µ–Ω—è–µ–º —Å—á—ë—Ç –º–∞—à–∏–Ω—ã
          this.changeMachineScoreArray(i, this.state.machineArray); // –º–µ–Ω—è–º –º–∞—Å—Å–∏–≤ —Å —è–±–ª–æ–∫–∞–º–∏ –ò–ò
        }
    }

    if(this.state.apples.length === 0) {
        return this.state.userScore % 2 == 0 ? alert('User win!') : alert('Machine win!');
    }
  }

  changeUserScoreArray = (n, arr) => {
    let localArr = [...arr]; // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞—à–∏—Ö —è–±–ª–æ–∫
    for (let i = 0; i < n; i++) {
      localArr.push('üçé'); // –¥–æ–±–∞–≤–ª—è–µ–º —è–±–ª–æ–∫–∏
    }
    this.setState({userArray: [...localArr]}); // –º–µ–Ω—è–µ–º state 
  }  

  changeMachineScoreArray = (n, arr) => {
    let localArr = [...arr]; // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞—à–∏—Ö —è–±–ª–æ–∫
    for (let i = 0; i < n; i++) {
      localArr.push('üçé'); // –¥–æ–±–∞–≤–ª—è–µ–º —è–±–ª–æ–∫–∏
    }
    this.setState({machineArray: [...localArr]}); // –º–µ–Ω—è–µ–º state 
  }  

  removeFromApplesArray = (n) => {
    let arr = [...this.state.apples]; // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —è–±–ª–æ–∫
    arr.splice(0,n); // —É–±–∏—Ä–∞–µ–º —è–±–ª–æ–∫–∏
    this.setState({apples: [...arr]}); // –º–µ–Ω—è–µ–º state 
  }

  render() {
    return (
        <div className="App">
          <h1>Get even number of apples!</h1>
          <p>{this.state.apples.join(", ")}</p>
          <p>Number of apples: {this.state.apples.length}</p>
          <div className='buttons-block'>
            <Button color='red' value={1} handleClick={() => this.handleClick(1)}/>
            <Button color='green' value={2} handleClick={() => this.handleClick(2)}/>
            <Button color='blue' value={3} handleClick={() => this.handleClick(3)}/>
          </div>
          <div className='score-field'>
            <MachineField machineScore={this.state.machineScore} machineArray={this.state.machineArray}/>
            <UserField userScore={this.state.userScore} userArray={this.state.userArray}/>
          </div>
        </div>
      );
  }
}

export default App;

import React, { useState } from 'react';
import './App.css';

import Button from './components/Button';
import UserField from './components/UserField';
import MachineField from './components/MachineField';

function App() {
  const [apples, setApples] = useState(['üçé','üçé','üçé','üçé','üçé',
                                        'üçé','üçé','üçé','üçé','üçé',
                                        'üçé','üçé','üçé','üçé','üçé',
                                        'üçé','üçé','üçé','üçé','üçé',
                                        'üçé','üçé','üçé','üçé','üçé']);

  const [userScore, setUserScore] = useState(0);
  const [myApplesArray, setMyApplesArray] = useState([]);

  const [machineScore, setMachineScore] = useState(0);
  const [machineApplesArray, setMachineApplesArray] = useState([]);

  const handleClick = (n) => {
    setUserScore(userScore + n); // –º–µ–Ω—è–µ–º —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // -----------------------------------------------
    setUserScore((userScore) => {
      console.log(userScore); // "React is awesome!"
      
      return userScore;
    });
    // -----------------------------------------------
    changeScoreArray(n, myApplesArray, setMyApplesArray); // –º–µ–Ω—è–º –º–∞—Å—Å–∏–≤ —Å —è–±–ª–æ–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    setTimeout(machineTurn, 1000); // —Ö–æ–¥ –ò–ò
  }  

  const machineTurn = () => {
    for ( let i = 1; i <= 3; i++) { // i - –∫–æ–ª-–≤–æ —è–±–ª–æ–∫ –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑—å–º–µ—Ç –ò–ò
        let leftApples; // –∫–æ–ª-–≤–æ —è–±–ª–æ–∫ –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ò–ò —Å–¥–µ–ª–∞–µ—Ç —Ö–æ–¥
        leftApples = apples.length - i; 

        // –µ—Å–ª–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —á–∏—Å–ª–æ —è–±–ª–æ–∫, —Å—Ä–∞–≤–Ω–∏–º–æ–µ —Å 0 –∏–ª–∏ 1 –ø–æ –º–æ–¥—É–ª—é 4, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ i –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        if ( leftApples % 4 === 0 || leftApples % 4 === 1 ) {
          setMachineScore(machineScore + i); // –º–µ–Ω—è–µ–º —Å—á—ë—Ç –º–∞—à–∏–Ω—ã
          // -----------------------------------------------
          setMachineScore((machineScore) => {
            console.log(machineScore); 
            
            return machineScore;
          });
          // -----------------------------------------------
          changeScoreArray(i, machineApplesArray, setMachineApplesArray); // –º–µ–Ω—è–º –º–∞—Å—Å–∏–≤ —Å —è–±–ª–æ–∫–∞–º–∏ –ò–ò
        }
        console.log(machineScore+userScore)
        removeFromApplesArray((machineScore+userScore))
    }
  }

  const changeScoreArray = (n, arr, setArr) => {
    let localArr = [...arr]; // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞—à–∏—Ö —è–±–ª–æ–∫
    for (let i = 0; i < n; i++) {
      localArr.push('üçé'); // –¥–æ–±–∞–≤–ª—è–µ–º —è–±–ª–æ–∫–∏
    }
    setArr([...localArr]); // –º–µ–Ω—è–µ–º state 
  }  

  const removeFromApplesArray = (n) => {
    let arr = [...apples]; // –∫–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —è–±–ª–æ–∫
    arr.splice(0,n); // —É–±–∏—Ä–∞–µ–º —è–±–ª–æ–∫–∏
    setApples([...arr]); // –º–µ–Ω—è–µ–º state 
  }

  return (
    <div className="App">
      <h1>Get even number of apples!</h1>
      <p>{apples.join(", ")}</p>
      <p>Number of apples: {apples.length}</p>
      <div className='buttons-block'>
        <Button color='red' value={1} handleClick={() => handleClick(1)}/>
        <Button color='green' value={2} handleClick={() => handleClick(2)}/>
        <Button color='blue' value={3} handleClick={() => handleClick(3)}/>
      </div>
      <div className='score-field'>
        <MachineField machineScore={machineScore} machineApplesArray={machineApplesArray}/>
        <UserField userScore={userScore} myApplesArray={myApplesArray}/>
      </div>
    </div>
  );
}

export default App;
